#!/usr/bin/env es
# vim: ft=nxes
## Simple es configuration script
LANG=(en_US.UTF-8)
path=(/sbin /bin /usr/sbin /usr/bin /usr/games /usr/local/sbin /usr/local/bin $home^/bin $home^/bin/c)
editors = (nvim kak vim vis ed)
dirstack = ()
noexport = dirstack result

## TODO Improve comments
## Check for nvim and set it as the editor of choice
fn geteditor {
	for (e = $editors) {
		catch @ {
			## Exception handler, no else clause needed
			{if {eq $1 return} # 'return' is implemented as an exception, so we need to check the exception type
				{$1 $2}}
		} {
			{%seq
				{%pathsearch $e}
				{return $e} ## Return the editor we found
			}
		}
	}
}

## Simple function to print the result of its arguments
## this reduces the need of typing `echo <={...}` during interactive use
fn print {
	echo <={$*}
}

## Settor function to automatically set EDITOR and VISUAL
## to whatever the value of $editor is
set-editor = @ {
	{local (set-EDITOR=) EDITOR = $*}
	{local (set-VISUAL=) VISUAL = $*}
	{result $*}
}

## Replace character in string
fn replace original replacement separator { 
	return <= {%flatten $replacement <= {
		%split $separator $original
	}}
}

## Utility function to get current TTY in a history-friendly manner
fn histtty { 
	local (ht= <={%split \n <={%backquote / tty}})
		{return <= {%flatten / $ht(2) $ht(3)}}
}

## Settor function to create a per-session history file
set-TTY = @ {
	{local (set-history=) history = $home^/.history.^<={replace $* . /}}
	{local (set-GPG_TTY=) GPG_TTY = $*}
	{result $*}
}

## Make reloading the config easier
fn reload {
	. <={%home <={real-user}}^/.nxesrc
}

## NOTE: Several of these functions are relying on environmental variables,
## I'm well aware that these cannot be trusted, however tools like `id(1)`
## are unable to report the RUID (or more accurately, the UID of the user
## that spawned the elevated process) when using commands like `sudo -sE`
## or `doas -s`. That said, given the intended usage of these functions,
## if you have a potentially hostile environment, you likely have much
## larger issues than a simple inquiry function not being able to accurately
## report your original login name.

## Detect operation in escalated environments as via sudo(8)/doas(8)
## TODO: Consider expansion to other tools like pfexec(8) from Illumos
fn escalated? {
	if {%or {eq $#DOAS_USER 1} {eq $#SUDO_USER 1}
		} { true
		} { false
	}
}

## Extract the actual user running the privileged session
fn real-user {
	if {escalated?} {
		if {eq $#SUDO_USER 1} {
			result = $SUDO_USER
		} {if {eq $#DOAS_USER 1} {
			result = $DOAS_USER
		}}
	} {
		## Not actually escalated, just use $USER
		result = $USER
	}
}

## Simple interactive inquiry function 
fn iam? {
	local (realid = <={real-user}) {
		if {eq $realid $USER} {
			echo You are $realid
		} {
			echo You are $realid acting as $USER
		}
	}
}

## Allow interactive queries of the login name
fn ami login {
	local (logname =`{id -run}) {
		if {eq $logname $login} {
			echo Yes
		} {
			echo No, you are $USER
		}
	}
}

## Non-interactive user querying, for use in scripting
## allows usage like `if {iam root} { foo }`
fn iam login {
	local (current = $USER) {
		if {eq $login $current} {
			true
		} {
			false
		}
	}
}

## Everything is vim
fn vim {
	if {escalated?} {
		## Since I actually do use {n,}vim most of the time, ensure that my ~/.vimrc is loaded
		## even when running an escalated session that may clobber the value of $HOME or $USER
		$editor -u <={%home <={real-user}}^/.vimrc $*
	} {
		## Operate normally if not an escalated session
		$editor $*
	}
}

## Create a '++' pseudo-operator, mutates state internally
## Unfortunately due to the ubiquity of getopt(3) style argument parsing
## adding a corresponding '--' pseudo-operator is not practical.
fn ++ i {
	## The argument 'i' is meant to be a variable reference,
	## used like so:
	## ; x = 0
	## ; ++ x
	## ; echo $x
	## 1
	$i = <= {
		$&sum $$i 1
	}
}

## Creates simple equality checks, similar to '==' in C
## or the '='/'eq?' forms in some lisp dialects
fn eq a b {
	~ $a $b
}

## Modified form to accept variable references instead of values
fn veq a b {
	~ $$a $$b
}

## Enable prettier printing of the current primitives
fn primitives {
	local (pi = 1)
	let (plist = <= {$&primitives}) {
		echo Found $#plist primitives:
		for (p = $plist) {
			echo $pi: $p
			++ pi
		}
	}
}

## TODO: Test if pushing to the head of the list instead of the tail is faster
## Stack management functions
## By necessity, these mutate their stack argument
fn push stack value {
	if {%and {eq $$stack ()} {%not {eq $value ()}}} {
		## Create the stack
		$stack = $value
	} {
		if {%not {eq $value} ()} {
			$stack = $$stack $value
		}
	}
}

fn pop stack {
	if {%not {eq $$stack ()}} {
		## Stack is non-empty
		local (_s = $$stack) {
			$stack = $_s(... <={sub <={%count $_s} 1})
		}
	}
}

## Iplement pushd/popd/dirs
fn pushd target {
	## We appear to have a valid target
	if {eq $dirstack () } {
		push dirstack <={%backquote <={%flatten '' $ifs} {pwd}}
	}
	{%seq
		{%and 
			{push dirstack <={%backquote <={%flatten '' $ifs} {readlink -f $target}}}
			## Pop the entry if chdir(2) fails
			{%or {cd $target} {pop dirstack}}
		}
	}
}

fn popd {
	if {%not {eq <={%count $dirstack} 0}} {
		local (dc =<={%count $dirstack}) {
			{%seq
				{%and {cd $dirstack(<={sum $dc -1})}
					{pop dirstack}
				}
			}
		}
	} {
		## Basically a no-op
		:
	}
}

## TODO: Print dirstack in a more intuitive manner
fn dirs {
	echo $dirstack
}

## Automatically set editor related variables
editor =<={geteditor}
TTY =/dev/^<={histtty}
